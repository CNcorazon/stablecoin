// XD-Coin Â§öÁΩëÁªúÈÖçÁΩÆ
export interface NetworkConfig {
    chainId: number;
    name: string;
    rpcUrl: string;
    contracts: {
        token: string;
        bridge: string;
        accessManager: string;
    };
    deployerAddress: string;
    ccipChainSelector: string;
}

export const NETWORK_CONFIGS: Record<string, NetworkConfig> = {
    sepolia: {
        chainId: 11155111,
        name: "sepolia",
        rpcUrl: "https://sepolia.infura.io/v3/e4b04da787284b48b51382d10172accb",
        contracts: {
            token: "0x23251cC261550B27FbB53c8cb3505341705fFaEa",
            bridge: "0x8a1BC16541191A28103b050d8b93055aF5c06F0b",
            accessManager: "0xf1c5d6dBC7229DcaEB2E828d7b7EE85C29074B52"
        },
        deployerAddress: "0xe196efB0166Fa2351a736047C0935Ac9C456421B",
        ccipChainSelector: "16015286601757825753"
    },
    bscTestnet: {
        chainId: 97,
        name: "bscTestnet",
        rpcUrl: "https://data-seed-prebsc-1-s1.binance.org:8545",
        contracts: {
            token: "0x8924BC61E85315e8442f2feBDe2bd94231f9DeE0",
            bridge: "0x9D0c783314229D277e7e90ebAAd85078F9F4A9B2",
            accessManager: "0x6a52bcA908FC39204EfcEF0e7204b2Bcb2a0e0be"
        },
        deployerAddress: "0xe196efB0166Fa2351a736047C0935Ac9C456421B",
        ccipChainSelector: "13264668187771770619"
    }
};

// Ëé∑ÂèñÂΩìÂâçÁΩëÁªúÈÖçÁΩÆ
export const getCurrentNetworkConfig = (chainId: number): NetworkConfig | null => {
    return Object.values(NETWORK_CONFIGS).find(config => config.chainId === chainId) || null;
};

// Ëé∑ÂèñÁõÆÊ†áÁΩëÁªúÈÖçÁΩÆ
export const getTargetNetworkConfig = (currentChainId: number): NetworkConfig | null => {
    if (currentChainId === 11155111) {
        return NETWORK_CONFIGS.bscTestnet;
    } else if (currentChainId === 97) {
        return NETWORK_CONFIGS.sepolia;
    }
    return null;
};

// ÂÆåÊï¥ÁöÑÂêàÁ∫¶ ABI
export const TOKEN_ABI = [
    // ERC20 Âü∫Á°ÄÂäüËÉΩ
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function decimals() view returns (uint8)",
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address) view returns (uint256)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "function approve(address spender, uint256 amount) returns (bool)",
    "function allowance(address owner, address spender) view returns (uint256)",
    "function transferFrom(address from, address to, uint256 amount) returns (bool)",

    // Êâ©Â±ïÂäüËÉΩ
    "function mint(address to, uint256 amount)",
    "function burn(uint256 amount)",
    "function pause()",
    "function unpause()",
    "function paused() view returns (bool)",
    "function blockUser(address user)",
    "function unblockUser(address user)",
    "function blocked(address user) view returns (bool)",
    "function freeze(address user, uint256 amount)",
    "function frozen(address user) view returns (uint256)",
    "function availableBalance(address user) view returns (uint256)",

    // ‰∫ã‰ª∂
    "event Transfer(address indexed from, address indexed to, uint256 value)",
    "event Approval(address indexed owner, address indexed spender, uint256 value)",
    "event Paused(address account)",
    "event Unpaused(address account)"
];

export const BRIDGE_ABI = [
    "function transferCrossChain(uint64 destinationChainSelector, address receiver, address user, uint256 amount) payable returns (bytes32)",
    "function estimateCrossChainFee(uint64 destinationChainSelector, address receiver, address user, uint256 amount) view returns (uint256)",
    "function i_token() view returns (address)",
    "function i_router() view returns (address)",

    // ‰∫ã‰ª∂
    "event MessageSent(bytes32 indexed messageId, uint64 indexed destinationChainSelector, address indexed receiver, address user, uint256 amount, uint256 fee)",
    "event MessageReceived(bytes32 indexed messageId, uint64 indexed sourceChainSelector, address indexed sender, address user, uint256 amount)"
];

// API ÈÖçÁΩÆ - Â¢ûÂä†Êõ¥Â§öÁ´ØÁÇπ
export const API_CONFIG = {
    baseUrl: process.env.NODE_ENV === 'production'
        ? "api"
        : "http://localhost:3000",

    endpoints: {
        // ‰ª£ÁêÜËΩ¨Ë¥¶
        transfer: "/api/transfer",
        transferHistory: "/api/transfer/history",

        // Êü•ËØ¢Êé•Âè£
        balance: "/balance",
        frozenBalance: "/frozen-balance",
        availableBalance: "/available-balance",
        status: "/status",
        networks: "/networks",

        // ÁÆ°ÁêÜÊé•Âè£
        mint: "/mint",
        burn: "/burn",
        freeze: "/freeze",
        unfreeze: "/unfreeze",
        block: "/block",
        unblock: "/unblock",
        pause: "/pause",
        unpause: "/unpause",

        // ÂÖ∂‰ªñ
        health: "/health",
        tx: "/tx"
    }
};

// Êõ¥Êñ∞ API Ë∞ÉÁî®Â∑•ÂÖ∑ÂáΩÊï∞ - ÈÄÇÈÖçÊñ∞ÁöÑÂìçÂ∫îÊ†ºÂºèÂπ∂ÊâÅÂπ≥ÂåñÊï∞ÊçÆ
export const apiCall = async (endpoint: string, data?: any, method: 'GET' | 'POST' = 'GET') => {
    const url = `${API_CONFIG.baseUrl}${endpoint}`;

    try {
        const response = await fetch(url, {
            method: data ? 'POST' : method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: data ? JSON.stringify(data) : undefined,
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status}`);
        }

        const result = await response.json();

        // ÈÄÇÈÖçÊñ∞ÁöÑÂìçÂ∫îÊ†ºÂºè
        if (result.success === false) {
            throw new Error(result.message || result.error || 'Êìç‰ΩúÂ§±Ë¥•');
        }

        // üöÄ Êï∞ÊçÆÊâÅÂπ≥ÂåñÂ§ÑÁêÜ - ‰∏∫‰∫ÜÂêëÂêéÂÖºÂÆπ
        // Â∞Ü data ÂØπË±°‰∏≠ÁöÑÂ≠óÊÆµÊèêÂçáÂà∞È°∂Á∫ßÔºåÂêåÊó∂‰øùÁïôÂéüÂßãÁöÑ data ÂØπË±°
        if (result.data && typeof result.data === 'object') {
            return {
                ...result,        // ‰øùÁïôÂéüÂßãÂ≠óÊÆµ (success, message, timestamp, data Á≠â)
                ...result.data    // Â∞Ü data ‰∏≠ÁöÑÂ≠óÊÆµÊèêÂçáÂà∞È°∂Á∫ß (balance, availableBalance, frozenBalance Á≠â)
            };
        }

        return result;
    } catch (error) {
        console.error('API Ë∞ÉÁî®Â§±Ë¥•:', error);
        throw error;
    }
};

// Êñ∞Â¢ûÔºö‰∏ìÈó®ÁöÑÊü•ËØ¢ÂáΩÊï∞ - ‰ΩøÁî® Query Parameters
export const queryBalance = async (address: string, network: string = 'sepolia') => {
    const endpoint = `${API_CONFIG.endpoints.balance}/${address}?network=${network}`;
    return apiCall(endpoint, null, 'GET');
};

export const queryFrozenBalance = async (address: string, network: string = 'sepolia') => {
    const endpoint = `${API_CONFIG.endpoints.frozenBalance}/${address}?network=${network}`;
    return apiCall(endpoint, null, 'GET');
};

export const queryAvailableBalance = async (address: string, network: string = 'sepolia') => {
    const endpoint = `${API_CONFIG.endpoints.availableBalance}/${address}?network=${network}`;
    return apiCall(endpoint, null, 'GET');
};

export const queryContractStatus = async (network: string = 'sepolia') => {
    const endpoint = `${API_CONFIG.endpoints.status}?network=${network}`;
    return apiCall(endpoint, null, 'GET');
};

// üÜï Êñ∞Â¢û‰∫§ÊòìÁä∂ÊÄÅÊü•ËØ¢ÂáΩÊï∞
export const queryTransactionStatus = async (txHash: string, network: string = 'sepolia') => {
    const endpoint = `${API_CONFIG.endpoints.tx}/${txHash}?network=${network}`;
    return apiCall(endpoint, null, 'GET');
}; 